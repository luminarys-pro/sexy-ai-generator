# ---------------- streamlit_app.py (Versi√≥n 2.0 Luminarys Production) ----------------

from __future__ import annotations
import streamlit as st
import google.generativeai as genai
import json
from typing import List, Dict
import os

# ---------- LISTAS DE OPCIONES ----------

# Lista de nichos m√°s completa
ALL_NICHES = [
    # Atributos F√≠sicos / Est√©tica
    "Atributo: BBW / Talla Grande",
    "Atributo: Pies (Foot Fetish)",
    "Atributo: Madura (Mature / Cougar / MILF)",
    "Atributo: Petite / Peque√±a",
    "Atributo: Fitness / Musculosa",
    "Atributo: Tatuajes y Piercings (Alt-Model)",
    "Atributo: G√≥tica / Emo",
    "Atributo: Pelirroja",
    "Atributo: Rubia",
    "Atributo: Latina",
    "Atributo: Asi√°tica",
    "Atributo: √âbano (Ebony)",
    # Actividades / Fetiches
    "Actividad: ASMR Er√≥tico",
    "Actividad: Dominaci√≥n Financiera (Findom)",
    "Actividad: Juego de Roles (Roleplay)",
    "Actividad: Humillaci√≥n / Degradaci√≥n",
    "Actividad: Adoraci√≥n (Worship)",
    "Actividad: BDSM / Bondage",
    "Actividad: Cuckolding",
    "Actividad: Contenido de Embarazo (Pregnancy)",
    "Actividad: Fumar (Smoking Fetish)",
    # Hobbies / Creatividad
    "Hobby: Arte Sin Censura",
    "Hobby: Cosplay (Er√≥tico y General)",
    "Hobby: Escritura / Poes√≠a Er√≥tica",
    "Hobby: Gamer / Videojuegos",
    "Hobby: Conversaci√≥n (Experiencia Novio/a Virtual)",
]

# Lista de intensidades reordenada y sin Cosplay
INTENSITY_LEVELS = ("Neutral", "Coqueto", "Sumisa", "Dominante", "Fetichista")

# Lista de idiomas disponibles
AVAILABLE_LANGUAGES = ("Espa√±ol", "Ingl√©s", "Franc√©s", "Portugu√©s", "Alem√°n", "Ruso", "Neerland√©s")

# Mapeo de idiomas a emojis para una visualizaci√≥n m√°s atractiva
LANGUAGE_EMOJI_MAP = {
    "Espa√±ol": "üá™üá∏",
    "Ingl√©s": "üá∫üá∏",
    "Franc√©s": "üá´üá∑",
    "Portugu√©s": "üáµüáπüáßüá∑",
    "Alem√°n": "üá©üá™",
    "Ruso": "üá∑üá∫",
    "Neerland√©s": "üá≥üá±",
}

# ---------- CONFIGURACI√ìN P√ÅGINA ----------
st.set_page_config(
    page_title="Sexy AI Message Generator",
    page_icon="‚ú®",
    layout="centered",
)

# ---------- CLAVE GEMINI ----------
try:
    api_key = os.environ['GEMINI_API_KEY']
    genai.configure(api_key=api_key)
except KeyError:
    st.error("No se encontr√≥ la clave de API de Gemini. Aseg√∫rate de a√±adirla a los 'Secrets'.")
    st.stop()

# ---------- CABECERA Y BRANDING ----------
st.title("üíå Sexy AI Message Generator")
st.markdown("by **Luminarys Production**")
st.write("---")

# ---------- CONTROLES DE LA APP ----------

# 1. Selector de tipo de generaci√≥n
generation_type = st.selectbox(
    "1. ¬øQu√© quieres generar?",
    ("DM para Fans", "Descripci√≥n para Post")
)

# Controles condicionales
dm_type = ""
physical_features = ""
if generation_type == "DM para Fans":
    dm_type = st.radio(
        "üéØ Prop√≥sito del DM",
        ("Mass DM Free (Atraer)", "Mass DM $ (Vender)", "Mass Sub (Retener)"),
        index=0,
    )
else: # generation_type == "Descripci√≥n para Post"
    physical_features = st.text_input(
        "‚ú® Tus 3 caracter√≠sticas f√≠sicas principales",
        placeholder="Ej: pelo rojo, ojos verdes, tatuajes en el brazo",
        help="Describe 3 rasgos f√≠sicos para que la IA los mencione sutilmente en la descripci√≥n."
    )

selected_niches = st.multiselect(
    "2. Elige hasta 2 nichos para combinar",
    options=ALL_NICHES,
    max_selections=2,
)

# 2. Selector de intensidad actualizado
intensity = st.selectbox(
    "3. Nivel de intensidad",
    options=INTENSITY_LEVELS,
    index=1 # 'Coqueto' por defecto
)

# 4. Selector de idiomas
output_languages = st.multiselect(
    "4. Idiomas de salida",
    options=AVAILABLE_LANGUAGES,
    default=["Espa√±ol", "Ingl√©s"]
)

num_messages = st.slider(
    "5. Cantidad de ideas a generar", 1, 10, 3
)

st.write("---")

# ================= BOT√ìN =================
if st.button("üöÄ Generar Contenido"):
    if not output_languages:
        st.error("Por favor, selecciona al menos un idioma de salida.")
    else:
        # ---------- CONSTRUCCI√ìN DIN√ÅMICA DEL PROMPT ----------
        language_clause = ", ".join(output_languages)
        niche_clause = ", ".join(selected_niches) if selected_niches else "General / Sin nicho espec√≠fico"

        task_description = ""
        if generation_type == "DM para Fans":
            task_description = f"Tu Tarea es generar {num_messages} mensajes directos (DM) para fans. El prop√≥sito de estos DMs es: `{dm_type}`."
        else: # generation_type == "Descripci√≥n para Post"
            task_description = f"Tu Tarea es generar {num_messages} descripciones o pies de foto (captions) para un post en una red social. Estas descripciones deben ser seductoras y atractivas."
            if physical_features:
                task_description += f" La creadora ha descrito sus caracter√≠sticas f√≠sicas como: `{physical_features}`. Debes incorporar sutilmente alguna de estas caracter√≠sticas en el texto para hacerlo m√°s personal."

        prompt = f"""
        **Tu Rol y Personalidad:**
        Eres una IA que encarna el rol de una experta en psicolog√≠a sexual y socioemocional, psicolog√≠a de ventas y estrategia de marketing. Eres una creadora de contenido veterana y exitosa en plataformas como OnlyFans, Fansly y FanCentro. Entiendes profundamente c√≥mo crear conexiones y deseo a trav√©s de las palabras. Tienes un conocimiento enciclop√©dico en todas las √°reas de la sexualidad y las din√°micas de los nichos de contenido para adultos.

        **Instrucci√≥n Principal:**
        {task_description}

        **Reglas Estrictas para la Generaci√≥n:**
        1.  **Combinaci√≥n de Nichos:** El contenido debe fusionar creativamente los siguientes nichos: `{niche_clause}`. Si no se selecciona ninguno, enf√≥cate en un estilo m√°s general.
        2.  **Intensidad:** El tono debe corresponder a este nivel de intensidad: `{intensity}`.
        3.  **Generaci√≥n Multiling√ºe:** Para CADA una de las {num_messages} ideas, debes proveer una versi√≥n en CADA UNO de los siguientes idiomas: `{language_clause}`.
        4.  **Adaptaci√≥n Cultural (Ingl√©s):** La versi√≥n en 'Ingl√©s' NO debe ser una traducci√≥n literal del espa√±ol. Debe sonar como una hablante nativa de Estados Unidos (USA), usando jerga y expresiones coloquiales apropiadas para el nicho y la intensidad.
        5.  **Formato de Salida Obligatorio (JSON):** Devuelve √öNICAMENTE un objeto JSON v√°lido. La estructura debe ser una clave "messages", que contiene una lista. Cada elemento de la lista es una 'idea' de mensaje. Cada 'idea' contiene una clave "outputs", que es una lista de objetos, donde cada objeto tiene una clave "language" y una "text".

            **Ejemplo de formato de salida para 1 idea en 2 idiomas:**
            {{
              "messages": [
                {{
                  "id": 1,
                  "outputs": [
                    {{ "language": "Espa√±ol", "text": "El texto en espa√±ol va aqu√≠." }},
                    {{ "language": "Ingl√©s", "text": "The English text goes here." }}
                  ]
                }}
              ]
            }}

        Ahora, bas√°ndote en tu profundo conocimiento, genera el contenido.
        """.strip()

        # ---------- LLAMADA A GEMINI ----------
        with st.spinner("üß† La IA est√° pensando..."):
            try:
                model = genai.GenerativeModel('gemini-1.5-flash-latest')
                generation_config = genai.types.GenerationConfig(temperature=1.0) # M√°xima creatividad
                response = model.generate_content(prompt, generation_config=generation_config)
                raw = response.text.strip()
            except Exception as exc:
                st.error(f"‚ùå Error con la API de Gemini: {exc}")
                st.stop()

            # ---------- PARSEO Y VISUALIZACI√ìN ----------
            try:
                if raw.startswith("```json"):
                    raw = raw.replace("```json", "").replace("```", "").strip()
                data = json.loads(raw)
                msgs = data.get("messages", [])
                
                if not msgs:
                    st.error("La respuesta de la IA no conten√≠a mensajes. Intenta de nuevo.")
                    st.code(raw, language="json")
                else:
                    st.success("‚úÖ ¬°Contenido fresco generado!")
                    for i, item in enumerate(msgs, 1):
                        st.markdown(f"#### Idea de Contenido #{i}")
                        outputs = item.get("outputs", [])
                        if outputs:
                            for output in outputs:
                                lang = output.get("language", "Desconocido")
                                text = output.get("text", "No generado.")
                                emoji = LANGUAGE_EMOJI_MAP.get(lang, "üè≥Ô∏è")
                                st.markdown(f"{emoji} **{lang}:** {text}")
                        st.write("---")

            except json.JSONDecodeError:
                st.error("‚ùå La IA devolvi√≥ un formato de JSON inv√°lido. Respuesta bruta:")
                st.code(raw, language="text")

# ---------- PIE ----------
st.markdown(
    """
<div style='text-align:center;font-size:0.8em; margin-top: 2em;'>
Powered by Google Gemini
</div>
""",
    unsafe_allow_html=True,
)